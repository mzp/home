syntax on
scriptencoding utf-8

" ============================================================
" Basic
" ============================================================
set history=1000
set showcmd
set showmatch
set hidden
set showtabline=2
set cursorline
"set cursorcolumn

" tab character
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" encoding
set fileencodings=utf-8,euc-jp

" search
set ignorecase
set smartcase
set incsearch
set wrapscan
set hlsearch

" undofile
set undofile
set undodir=~/.undo


set cmdheight=3

" auto cd
au BufEnter * execute ":lcd " . expand("%:p:h")

" ------------------------------------------------------------
" stataus line
" ------------------------------------------------------------
set statusline=%F%m%r%h%w\ [%{&ff}]\ [%Y]\ (%04l,%04v)[%p%%]
set laststatus=2
au InsertEnter * hi StatusLine guifg=DrakBlue guibg=DarkYellow gui=none ctermfg=Black ctermbg=Yellow cterm=none
au InsertLeave * hi StatusLine guifg=DrakBlue guibg=DarkGray gui=none ctermfg=Black ctermbg=White cterm=none

if has('unix') && !has('gui_running')
  inoremap <silent> <ESC> <ESC>
  inoremap <silent> <C-[> <ESC>
  inoremap <silent> <C-c> <ESC>
endif

" ------------------------------------------------------------
" color scheme
" ------------------------------------------------------------

" ------------------------------------------------------------
" invisible character
" ------------------------------------------------------------
" special character
set list
set lcs=tab:.\ ,trail:_

let &showbreak = "\u21b3 "

set display=uhex

" Strip trailing space before file write
autocmd BufWritePre * call StripTrailingWhite()
function! StripTrailingWhite()
  let l:winview = winsaveview()
  silent! %s/\s\+$//
  call winrestview(l:winview)
endfunction

" --------------------------------------------------------------------------------
"  keymap
" --------------------------------------------------------------------------------
nnoremap <C-j> <C-w>w<C-e><C-w>p
nnoremap <C-k> <C-w>w<C-y><C-w>p
let g:mapleader = ' '

" --------------------------------------------------------------------------------
" line number
" --------------------------------------------------------------------------------
set relativenumber
set number

" ============================================================
"  plugins
" ============================================================
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'vim-scripts/buftabs'
NeoBundle 'corntrace/bufexplorer'
"NeoBundle 'Shougo/vimfiler'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'tpope/vim-surround'
NeoBundle 'jdonaldson/vaxe'
" NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'dag/vim2hs'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'vim-scripts/desert256.vim'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 't9md/vim-textobj-function-ruby'

au BufNewFile,BufRead *.coffee set filetype=coffee

" Note: You don't set neobundle setting in .gvimrc!
" Original repos on github
" ...

filetype plugin indent on     " Required!
"
" Brief help
" :NeoBundleList          - list configured bundles
" :NeoBundleInstall(!)    - install(update) bundles
" :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" Installation check.
NeoBundleCheck

call neobundle#end()

" ------------------------------------------------------------
"  buftabs
" ------------------------------------------------------------
let buftabs_only_basename = 1
let buftabs_in_statuslin = 1

" ------------------------------------------------------------
"  bufexplorer
" ------------------------------------------------------------
let bufExplorerDetailedHelp = 1

" ------------------------------------------------------------
"  indent guides
" ------------------------------------------------------------
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=4

" ------------------------------------------------------------
"  quickrun
" ------------------------------------------------------------
nnoremap <silent> <C-s> :<C-u>QuickRun<CR>

function! OCamlType()
  let col  = col('.')
  let line = line('.')
  let file = expand("%:p:r")
  echo system("annot -n -type ".line." ".col." ".file.".annot")
endfunction
map <leader>. :call OCamlType()<cr>

"" unite.vim {{{
" The prefix key.
" unite.vim keymap
" https://github.com/alwei/dotfiles/blob/3760650625663f3b08f24bc75762ec843ca7e112/.vimrc
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>

"" }}}

" アクティブウィンドウに限りカーソル行(列)を強調する
highlight CursorLine ctermbg=blue guibg=blue
augroup vimrc_set_cursorline_only_active_window
  autocmd!
  autocmd VimEnter,BufWinEnter,WinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * hi IndentGuidesOdd  ctermbg=233
autocmd VimEnter,Colorscheme * hi IndentGuidesEven ctermbg=238

colorscheme desert256
